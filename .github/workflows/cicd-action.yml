name: NodeJS CI

on:
  push:
    branches:
      - "**"
    

  
jobs:
  lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 14.x]
    
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Pre-install
      run: |
        npm install
    - name: Lint
      run: |
        npm run lint
  
  test : 
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 14.x]
    
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Pre-install
      run: |
        npm install
    - name: Build 
      run: |
        npm run build
    # - name: Test
    #   run: |
    #     npm run test

  build:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [lint,test]
    strategy:
      matrix:
        node-version: [ 14.x]
    
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      run: |
        npm install
    - name: Build 
      run: |
        npm run build
  
  deploy:
    if: github.ref == 'refs/heads/master'
    name: Deploy on ECS
    runs-on: ubuntu-18.04
    needs: [build]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Build Docker image
      run: |
        npm install
        npm run build
        docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{secrets.AWS_REGION}}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Tag and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.ECR_URI }}
        IMAGE_TAG: latest
      run: |
        docker tag $REPO:latest $ECR_REGISTRY:$IMAGE_TAG
        docker push $ECR_REGISTRY:$IMAGE_TAG